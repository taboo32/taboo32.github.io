<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Byeong ki Cho</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2020-12-05T19:30:33+09:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Byeong ki Cho</name>
   <email></email>
 </author>

 
 <entry>
   <title>javascript 주요 메소드 목록 (업데이트 중)</title>
   <link href="http://localhost:4000/javascript/2020/12/05/ts-001/"/>
   <updated>2020-12-05T00:00:00+09:00</updated>
   <id>http://localhost:4000/javascript/2020/12/05/ts-001</id>
   <content type="html">&lt;!----------------- 탬플릿
## forEach
### 설명
[MDN]()
### 문법
```javascript

```
### 예시
```javascript

```
-------------------&gt;

&lt;h1 id=&quot;understanding-typescript-2020&quot;&gt;Understanding TypeScript 2020&lt;/h1&gt;

&lt;h3 id=&quot;what-is-typescript&quot;&gt;What is TypeScript?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Typescript is a Javascript Superset.&lt;/li&gt;
  &lt;li&gt;It makes writing javascript code easier and more powerful&lt;/li&gt;
  &lt;li&gt;But Brower can’t execute Typescript&lt;/li&gt;
  &lt;li&gt;also gives you extra error checking&lt;/li&gt;
  &lt;li&gt;in colon and specifying the type&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tsc&lt;/code&gt; ⇒ invoke typescript compiler&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;자바-스크립트의-문제점&quot;&gt;자바 스크립트의 문제점&lt;/h3&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;출력값&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어떤 input 이든 무조건 string으로 들어간다. 타입을 정할 수가 없다.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;tsc&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;는 타입 스크립트 컴파일러를 작동시킨다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;index.html 에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script src=&quot;sample-ts.js&quot;&lt;/code&gt; 항상 컴파일된 자바스크립트 파일을 읽어야한다. typescript는 읽지 못하기 때문에.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;it-forces-us-to-write-better-cleaner-and-less-error-prone-code&quot;&gt;It forces us to write better cleaner and less error prone code.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;error - prone (~ 하기 쉬운)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is Generic Programming?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Generic = 포괄적인, 총칭의 이라는 뜻이란다..후,,,&lt;/li&gt;
  &lt;li&gt;Generic은 어떠한 클래스 혹은 함수에서 사용할 타입을 그 함수나 클래스를 사용할 때 결정하는 프로그래밍 기법을 말한다.&lt;/li&gt;
  &lt;li&gt;JavaScript는 원래 타입 선언을 하지 않기 때문에 타입 에러가 발생하고, 코드 실행시키기 전까지 함수와 클래스가 모든 타입에 대응된다.&lt;/li&gt;
  &lt;li&gt;따라서 Generic을 통해서 단순히 하나의 타입에서만 작동하는 것이 아닌 여러 타입에서 작동하는 컴포넌트를 통해서 재사용할 수 있도록 해준다.&lt;/li&gt;
  &lt;li&gt;뒤에서 다시 공부해야겠다…머리에 잘 안들어오네&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;what is Decorators?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TypeScript 및 ES6에 클래스가 도입되면서 클래스 및 클래스 멤버에 Annotation을 달거나 수정하기 위해 추가 기능이 필요할때, 클래스 선언과 멤버에 Annotation과 meta-programming 구문을 추가할 수 있는 방법을 제공한다…&lt;/li&gt;
  &lt;li&gt;클래스 선언, 메소드, 접근자, 프로퍼티, 매게 변수에 첨부할 수 있는 특수한 종류의 선언이며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@expression&lt;/code&gt; 형식을 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;deviate?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일탈하다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;typescript-adds&quot;&gt;TypeScript adds&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Types&lt;/li&gt;
  &lt;li&gt;Next-gen JavaScript Features( Compiled down for older Browsers)&lt;/li&gt;
  &lt;li&gt;Non-JavaScript Features like Interfaces or Generics&lt;/li&gt;
  &lt;li&gt;Meta-Programming Features like Decorators.&lt;/li&gt;
  &lt;li&gt;Rich Configuration Options.&lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;modern-tooling-that-helps-even-in-non-typescript-projects&quot;&gt;Modern Tooling that helps even in non-TypeScript Projects&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>지킬 블로그 구글 검색 가능하게 하는 방법</title>
   <link href="http://localhost:4000/etc/2017/02/20/google-search-sitemap-jekyll/"/>
   <updated>2017-02-20T00:00:00+09:00</updated>
   <id>http://localhost:4000/etc/2017/02/20/google-search-sitemap-jekyll</id>
   <content type="html">&lt;h1 id=&quot;jekyll-블로그-글이-구글에서-검색되도록-만들기&quot;&gt;jekyll 블로그 글이 구글에서 검색되도록 만들기&lt;/h1&gt;

&lt;p&gt;jekyll로 만든 블로그 글은 구글에서 검색이 되지 않는다고 한다. &lt;br /&gt;
구글 검색이 가능하도록 하려면 몇가지 절차가 필요하다.&lt;/p&gt;

&lt;h2 id=&quot;구글-웹마스터-도구search-console에-속성-추가-및-인증&quot;&gt;구글 웹마스터 도구(Search Console)에 속성 추가 및 인증&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/webmasters/tools/home?hl=ko&quot;&gt;구글 웹 마스터 도구&lt;/a&gt; 접속&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;속성추가&lt;/code&gt; 버튼을 선택&lt;/li&gt;
  &lt;li&gt;자신의 jekyll 블로그 주소를 입력하여 속성 추가 (ex.https://wayhome25.github.io/)&lt;/li&gt;
  &lt;li&gt;구글에서 제공하는 html 다운로드&lt;/li&gt;
  &lt;li&gt;해당 파일을 자신의 github jekyll 블로그 루트 디렉토리에 올리고 (github 커밋 필요) 확인을 눌러서 인증 완료&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;sitemapxml-파일-작성&quot;&gt;sitemap.xml 파일 작성&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;sitemap.xml 파일을 작성하여 자신의 github jekyll 블로그 루트 디렉토리에 업로드 (github 커밋 필요) &lt;a href=&quot;https://github.com/wayhome25/wayhome25.github.io/blob/master/sitemap.xml&quot;&gt;sitemap.xml 내용 참고&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;주의사항 1&lt;/code&gt; 루트 디렉토리에 존재하는 _config.yml 파일 내의 url 부분에 자신의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;블로그 url을 입력&lt;/code&gt;해야 sitemap.xml에서 site.url 부분을 사용 할 수 있다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;url: https://wayhome25.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;주의사항 2&lt;/code&gt; sitemap.xml은 &lt;a href=&quot;https://github.com/wayhome25/wayhome25.github.io/blob/master/sitemap.xml&quot;&gt;파일링크&lt;/a&gt; 내용을 복사&amp;amp;붙여넣기 하여 작성한다. 1~2 행의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-------&lt;/code&gt; 부분도 포함시켜야 한다.  &lt;br /&gt;
(나는 포함시키지 않고 작성해서 여러번 테스트 에러가 발생했다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;구글-웹마스터-도구search-console에-sitemapxml-제출&quot;&gt;구글 웹마스터 도구(Search Console)에 sitemap.xml 제출&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;구글에게 sitemap.xml을 제출해야 구글이 내 블로그를 크롤링 하는 방식을 판단하고 검색엔진에 노출할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/webmasters/tools/home?hl=ko&quot;&gt;구글 웹 마스터 도구&lt;/a&gt; 접속&lt;/li&gt;
  &lt;li&gt;자신이 추가한 속성 (블로그)을 선택&lt;/li&gt;
  &lt;li&gt;왼쪽 메뉴 중 크롤링 &amp;gt; Sitemaps 선택&lt;/li&gt;
  &lt;li&gt;우측 상단의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SITEMAP 추가/테스트&lt;/code&gt; 버튼 선택&lt;/li&gt;
  &lt;li&gt;자신의 github에 커밋한 sitemap.xml 주소를 입력. (ex.https://wayhome25.github.io/ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;테스트 후 문제가 발생하지 않으면 제출&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://joelglovier.com/writing/sitemaps-for-jekyll-sites&quot;&gt;참고 글&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
